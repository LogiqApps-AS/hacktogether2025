name: Build and Deploy Dataverse Package

on:
  release:
    types: [published]
  push:
    branches: [main]
    paths-ignore:
      - '**/README.md'
  pull_request:
    branches: [main]

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
  buildType: Release
  projectfile: src/package
  msbuildtarget: src/package/src
  npm_project_dir: ./solutions/LogiqAppsPDP_PCF

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Set Build Version
        id: set_version
        run: |
          $date = Get-Date -Format "yyyy.MM.dd"
          $buildNumber = $env:GITHUB_RUN_NUMBER
          $version = "$date.$buildNumber"
          echo "##[set-output name=version;]$version"
          echo "Build version set to: $version"
        shell: pwsh

      - name: Update Solution Version
        run: |
          $version = "${{ steps.set_version.outputs.version }}"
          $xmlFiles = Get-ChildItem -Path ./solutions -Recurse -Filter Solution.xml
          foreach ($xmlFile in $xmlFiles) {
            [xml]$xml = Get-Content $xmlFile.FullName
            $xml.ImportExportXml.SolutionManifest.Version = $version
            $xml.Save($xmlFile.FullName)
          }
        shell: pwsh

      - name: Pack LogiqAppsEP Solution as Managed
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: '${{runner.temp}}/build/LogiqAppsEP_${{ steps.set_version.outputs.version }}_Managed.zip'
          solution-folder: 'solutions/LogiqAppsEP'
          solution-type: 'Managed'
      
      - name: Pack LogiqAppsEP Solution as Unmanaged
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: '${{runner.temp}}/build/LogiqAppsEP_${{ steps.set_version.outputs.version }}_Unmanaged.zip'
          solution-folder: 'solutions/LogiqAppsEP'
          solution-type: 'Unmanaged'

      - name: Pack LogiqAppsPDP Solution as Managed
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: '${{runner.temp}}/build/LogiqAppsPDP_${{ steps.set_version.outputs.version }}_Managed.zip'
          solution-folder: 'solutions/LogiqAppsPDP'
          solution-type: 'Managed'
        
      - name: Pack LogiqAppsPDP Solution as Unmanaged
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: '${{runner.temp}}/build/LogiqAppsPDP_${{ steps.set_version.outputs.version }}_Unmanaged.zip'
          solution-folder: 'solutions/LogiqAppsPDP'
          solution-type: 'Unmanaged'

      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packaged-solutions
          path: '${{runner.temp}}/build/*.zip'
          overwrite: true
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: packaged-solutions
        path: ./release-assets


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.set_version.outputs.version }}
        draft: true
        prerelease: false

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
          $assets = Get-ChildItem -Path ./release-assets -Filter *.zip
          foreach ($asset in $assets) {
            Write-Output "Uploading $asset"
            gh release upload ${{ github.ref }} $asset.FullName
          }
      shell: pwsh
