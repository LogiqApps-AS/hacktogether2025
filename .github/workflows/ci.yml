name: Build and Deploy Dataverse Package

on:
  release:
    types: [published]
  push:
    branches: [main]
    paths-ignore:
      - "**/README.md"
      - .github/**
  pull_request:
    branches: [main]

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN }}
  buildType: Release
  projectfile: pcf/package

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [18.x]
        dotnet-version: ['8.0.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Power Platform Tools
        uses: microsoft/powerplatform-actions/actions-install@v1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup .NET ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }} # Specify the version you need

      - name: Get PCF Solution Unique Name
        id: solution-unique-name
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ${{ env.projectfile }}/src/Other/Solution.xml
          xpath: "//ImportExportXml/SolutionManifest/UniqueName"

      - name: Get PCF Solution Version
        id: solution-version
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ${{ env.projectfile }}/src/Other/Solution.xml
          xpath: "//ImportExportXml/SolutionManifest/Version"     
      
      - name: Build solution with dotnet
        run: cd ${{ env.projectfile }} && dotnet build --configuration ${{ env.buildType }}

      - name: Set Build Version
        id: set_version
        run: |
          $date = Get-Date -Format "yyyy.MM.dd"
          $buildNumber = $env:GITHUB_RUN_NUMBER
          $version = "$date.$buildNumber"
          echo "##[set-output name=version;]$version"
          echo "Build version set to: $version"
        shell: pwsh

      - name: Update Solution Version
        run: |
          $version = "${{ steps.set_version.outputs.version }}"
          $xmlFiles = Get-ChildItem -Path ./solutions -Recurse -Filter Solution.xml
          foreach ($xmlFile in $xmlFiles) {
            [xml]$xml = Get-Content $xmlFile.FullName
            $xml.ImportExportXml.SolutionManifest.Version = $version
            $xml.Save($xmlFile.FullName)
          }
        shell: pwsh

      - name: Pack LogiqAppsEP Solution as Managed
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: "${{runner.temp}}/build/LogiqAppsEP_${{ steps.set_version.outputs.version }}_Managed.zip"
          solution-folder: "solutions/LogiqAppsEP"
          solution-type: "Managed"

      - name: Pack LogiqAppsEP Solution as Unmanaged
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: "${{runner.temp}}/build/LogiqAppsEP_${{ steps.set_version.outputs.version }}_Unmanaged.zip"
          solution-folder: "solutions/LogiqAppsEP"
          solution-type: "Unmanaged"

      - name: Pack LogiqAppsPDP Solution as Managed
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: "${{runner.temp}}/build/LogiqAppsPDP_${{ steps.set_version.outputs.version }}_Managed.zip"
          solution-folder: "solutions/LogiqAppsPDP"
          solution-type: "Managed"

      - name: Pack LogiqAppsPDP Solution as Unmanaged
        uses: microsoft/powerplatform-actions/pack-solution@v1
        with:
          solution-file: "${{runner.temp}}/build/LogiqAppsPDP_${{ steps.set_version.outputs.version }}_Unmanaged.zip"
          solution-folder: "solutions/LogiqAppsPDP"
          solution-type: "Unmanaged"

      # - name: Publish Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: packaged-solutions
      #     path: "${{runner.temp}}/build/*.zip"
      #     overwrite: true

      # - name: Download Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: packaged-solutions
      #     path: ./release-assets

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.set_version.outputs.version }}
          draft: true
          prerelease: false

      - name: Upload LogiqAppsPDP Managed Release Asset
        id: release-managed-solution1
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{runner.temp}}/build/LogiqAppsPDP_${{ steps.set_version.outputs.version }}_Managed.zip
          asset_name: LogiqAppsPDP_${{ steps.set_version.outputs.version }}_${{ steps.solution-version.outputs.info }}_Managed.zip
          asset_content_type: application/zip

      - name: Upload LogiqAppsPDP Unmanaged Release Asset
        id: release-managed-solution2
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{runner.temp}}/build/LogiqAppsPDP_${{ steps.set_version.outputs.version }}_Unmanaged.zip
          asset_name: LogiqAppsPDP_${{ steps.set_version.outputs.version }}_${{ steps.solution-version.outputs.info }}_Unmanaged.zip
          asset_content_type: application/zip

      - name: Upload LogiqAppsEP Managed Release Asset
        id: release-managed-solution3
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{runner.temp}}/build/LogiqAppsEP_${{ steps.set_version.outputs.version }}_Managed.zip
          asset_name: LogiqAppsEP_${{ steps.set_version.outputs.version }}_${{ steps.solution-version.outputs.info }}_Managed.zip
          asset_content_type: application/zip

      - name: Upload LogiqAppsEP Unanaged Release Asset
        id: release-managed-solution4
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{runner.temp}}/build/LogiqAppsEP_${{ steps.set_version.outputs.version }}_Unmanaged.zip
          asset_name: LogiqAppsEP_${{ steps.set_version.outputs.version }}_${{ steps.solution-version.outputs.info }}_Unmanaged.zip
          asset_content_type: application/zip

      - name: Upload PCF Asset ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip (Managed)
        id: release-managed-solution5
        uses: actions/upload-release-asset@v1
        if: steps.create_release.conclusion == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.projectfile }}/bin/${{ env.buildType }}/${{ steps.solution-unique-name.outputs.info }}.zip
          asset_name: ${{ steps.solution-unique-name.outputs.info }}_${{ steps.solution-version.outputs.info }}_managed.zip
          asset_content_type: application/zip